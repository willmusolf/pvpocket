name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:  # Manual triggers
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'fast'
        type: choice
        options:
          - fast
          - full
          - unit
          - security
          - performance

env:
  GCP_PROJECT_ID: pvpocket-dd286
  GAE_SERVICE: default

jobs:
  test:
    name: Run Tests and Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Install Node.js dependencies
      run: npm install
      
    - name: Security scan - Python dependencies
      run: |
        safety check --output json > safety-report.json || true
        
    - name: Security scan - Code analysis
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Lint Python code
      run: |
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
    - name: Run security and lint checks
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
      run: |
        # Run security checks and linting
        echo "Security and linting completed in previous steps"
        
    - name: Set up Firebase Emulator
      run: |
        # Install Firebase CLI
        npm install -g firebase-tools
        
        # Create Firebase emulator configuration
        cat > firebase.json << EOF
        {
          "firestore": {
            "rules": "firestore.rules",
            "indexes": "firestore.indexes.json"
          },
          "storage": {
            "rules": "storage.rules"
          },
          "emulators": {
            "firestore": {
              "port": 8080
            },
            "storage": {
              "port": 9199
            },
            "ui": {
              "enabled": false
            }
          }
        }
        EOF
        
        # Create basic Firestore rules for testing
        cat > firestore.rules << EOF
        rules_version = '2';
        service cloud.firestore {
          match /databases/{database}/documents {
            match /{document=**} {
              allow read, write: if true;
            }
          }
        }
        EOF
        
        # Create basic Storage rules for testing
        cat > storage.rules << EOF
        rules_version = '2';
        service firebase.storage {
          match /b/{bucket}/o {
            match /{allPaths=**} {
              allow read, write: if true;
            }
          }
        }
        EOF
        
        # Create empty indexes file
        echo '{"indexes": [], "fieldOverrides": []}' > firestore.indexes.json
    
    - name: Determine test strategy
      id: test_strategy
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "🎮 Manual trigger - Running ${{ github.event.inputs.test_type }} tests"
          echo "test_type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          echo "description=Manually triggered ${{ github.event.inputs.test_type }} tests" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "🚀 Pull Request detected - Running FAST tests (mocked data)"
          echo "test_type=fast" >> $GITHUB_OUTPUT
          echo "description=Fast tests with mocked data for quick PR feedback" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "🔍 Push to MAIN branch - Running FULL tests (including integration)"
          echo "test_type=full" >> $GITHUB_OUTPUT  
          echo "description=Comprehensive test suite with Firebase emulator for production readiness" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
          echo "⚡ Push to DEVELOPMENT branch - Running FAST tests (mocked data)"
          echo "test_type=fast" >> $GITHUB_OUTPUT
          echo "description=Fast tests for development branch - quick validation" >> $GITHUB_OUTPUT
        else
          echo "❓ Unknown trigger - Defaulting to FAST tests"
          echo "test_type=fast" >> $GITHUB_OUTPUT
          echo "description=Default fast tests for unknown trigger" >> $GITHUB_OUTPUT
        fi
        
    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov pytest-mock
        
    - name: Run fast tests
      if: steps.test_strategy.outputs.test_type == 'fast'
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
        GCP_PROJECT_ID: demo-test-project
        GCLOUD_PROJECT: demo-test-project
        FIREBASE_PROJECT_ID: demo-test-project
        FIREBASE_SECRET_NAME: test-secret
        FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
        FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199
        RUN_INTEGRATION_TESTS: 1
        FORCE_EMULATOR_MODE: 1
      run: |
        echo "🚀 ${{ steps.test_strategy.outputs.description }}"
        echo "🔥 Starting Firebase emulators for fast tests..."
        
        # Start Firebase emulators in background with explicit project ID
        echo "🔥 Starting Firebase emulators with project: demo-test-project"
        firebase emulators:start --only firestore,storage --project demo-test-project &
        EMULATOR_PID=$!
        
        # Wait for emulators to start
        echo "⏳ Waiting for Firebase emulators to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ Firestore emulator is ready!"
            break
          fi
          echo "Waiting for emulators... ($i/30)"
          sleep 2
        done
        
        # Install Firebase Admin SDK for seeding
        pip install firebase-admin || echo "Firebase Admin SDK already installed"
        
        # Seed test data for integration tests that require real data
        if [ -f "scripts/create_test_data.py" ]; then
          echo "🌱 Seeding Firebase emulator with test data for integration tests..."
          python scripts/create_test_data.py
          if [ $? -eq 0 ]; then
            echo "✅ Test data seeded successfully!"
            echo "⏱️ Waiting 3 seconds for emulator to fully process data..."
            sleep 3
            
            # Debug: Test data accessibility from both REST API and Admin SDK
            echo "🔍 Running Firebase connection diagnostic..."
            python debug_firebase_connection.py
            
            # Test card API endpoints directly
            echo "🧪 Testing card API endpoints..."
            python test_card_api_simple.py
          else
            echo "⚠️ Test data seeding failed, but continuing with tests..."
          fi
        else
          echo "⚠️ Test data script not found, running tests without seed data..."
        fi
        
        # Run fast tests with emulator
        python -m pytest tests/ -m "not slow" -v --tb=short --cov=app --cov-report=json
        
        # Stop emulators
        kill $EMULATOR_PID || true
        
        echo "✅ Fast tests completed successfully!"
        
    - name: Run specific test category
      if: contains(fromJSON('["unit", "security", "performance"]'), steps.test_strategy.outputs.test_type)
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
        GCP_PROJECT_ID: demo-test-project
        GCLOUD_PROJECT: demo-test-project
        FIREBASE_PROJECT_ID: demo-test-project
        FIREBASE_SECRET_NAME: test-secret
        FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
        FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199
        RUN_INTEGRATION_TESTS: 1
        FORCE_EMULATOR_MODE: 1
      run: |
        echo "🎯 ${{ steps.test_strategy.outputs.description }}"
        echo "🔥 Starting Firebase emulators for ${{ steps.test_strategy.outputs.test_type }} tests..."
        
        # Start Firebase emulators in background with explicit project ID
        echo "🔥 Starting Firebase emulators with project: demo-test-project"
        firebase emulators:start --only firestore,storage --project demo-test-project &
        EMULATOR_PID=$!
        
        # Wait for emulators to start
        echo "⏳ Waiting for Firebase emulators to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ Firestore emulator is ready!"
            break
          fi
          echo "Waiting for emulators... ($i/30)"
          sleep 2
        done
        
        # Install Firebase Admin SDK for seeding
        pip install firebase-admin || echo "Firebase Admin SDK already installed"
        
        # Seed test data for integration tests that require real data
        if [ -f "scripts/create_test_data.py" ]; then
          echo "🌱 Seeding Firebase emulator with test data for integration tests..."
          python scripts/create_test_data.py
          if [ $? -eq 0 ]; then
            echo "✅ Test data seeded successfully!"
            echo "⏱️ Waiting 3 seconds for emulator to fully process data..."
            sleep 3
            
            # Debug: Test data accessibility from both REST API and Admin SDK
            echo "🔍 Running Firebase connection diagnostic..."
            python debug_firebase_connection.py
            
            # Test card API endpoints directly
            echo "🧪 Testing card API endpoints..."
            python test_card_api_simple.py
          else
            echo "⚠️ Test data seeding failed, but continuing with tests..."
          fi
        else
          echo "⚠️ Test data script not found, running tests without seed data..."
        fi
        
        # Run specific test category with emulator
        python -m pytest tests/ -m "${{ steps.test_strategy.outputs.test_type }}" -v --tb=short
        
        # Stop emulators
        kill $EMULATOR_PID || true
        
        echo "✅ ${{ steps.test_strategy.outputs.test_type }} tests completed successfully!"
        
    - name: Run full test suite (Push)
      if: steps.test_strategy.outputs.test_type == 'full'
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
        GCP_PROJECT_ID: demo-test-project
        GCLOUD_PROJECT: demo-test-project
        FIREBASE_PROJECT_ID: demo-test-project
        FIREBASE_SECRET_NAME: test-secret
        FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
        FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199
        RUN_INTEGRATION_TESTS: 1
        FORCE_EMULATOR_MODE: 1
      run: |
        echo "🔍 ${{ steps.test_strategy.outputs.description }}"
        echo "🔥 Starting Firebase emulators and running comprehensive tests..."
        
        # Start Firebase emulators in background with explicit project ID
        echo "🔥 Starting Firebase emulators with project: demo-test-project"
        firebase emulators:start --only firestore,storage --project demo-test-project &
        EMULATOR_PID=$!
        
        # Wait for emulators to start and be ready
        echo "⏳ Waiting for Firebase emulators to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ Firestore emulator is ready!"
            break
          fi
          echo "Waiting for emulators... ($i/30)"
          sleep 2
        done
        
        # Install Firebase Admin SDK for seeding
        pip install firebase-admin || echo "Firebase Admin SDK already installed"
        
        # Seed test data for integration tests
        if [ -f "scripts/create_test_data.py" ]; then
          echo "🌱 Seeding Firebase emulator with test data..."
          python scripts/create_test_data.py
          if [ $? -eq 0 ]; then
            echo "✅ Test data seeded successfully!"
          else
            echo "⚠️ Test data seeding failed, but continuing with tests..."
          fi
        else
          echo "⚠️ Test data script not found, running tests without seed data..."
        fi
        
        # Run comprehensive test suite
        python -m pytest tests/ -v --tb=short --cov=app --cov-report=json
        
        # Stop emulators
        kill $EMULATOR_PID || true
        
        echo "✅ Full test suite completed successfully!"
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          safety-report.json
          bandit-report.json
          performance_test_report.json
          *.log

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/development'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Create deployment configuration
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        REFRESH_SECRET_KEY: ${{ secrets.REFRESH_SECRET_KEY }}
        GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        TASK_AUTH_TOKEN: ${{ secrets.TASK_AUTH_TOKEN }}
      run: |
        cat > app-test-deploy.yaml << EOF
        runtime: python311
        service: test-env
        entrypoint: gunicorn -b :\$PORT run:app
        
        automatic_scaling:
          target_cpu_utilization: 0.6
          max_instances: 3
          min_instances: 0
        
        resources:
          cpu: 1
          memory_gb: 1
          disk_size_gb: 10
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        
        env_variables:
          FLASK_ENV: 'staging'
          GCP_PROJECT_ID: 'pvpocket-dd286'
          FIREBASE_SECRET_NAME: 'firebase-admin-sdk-json'
          SECRET_KEY: '${{ env.SECRET_KEY }}'
          REFRESH_SECRET_KEY: '${{ env.REFRESH_SECRET_KEY }}'
          GOOGLE_OAUTH_CLIENT_ID: '${{ env.GOOGLE_OAUTH_CLIENT_ID }}'
          GOOGLE_OAUTH_CLIENT_SECRET: '${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}'
          TASK_AUTH_TOKEN: '${{ env.TASK_AUTH_TOKEN }}'
          USE_FIRESTORE_CACHE: 'false'
          CACHE_TTL_HOURS: '24'
          USER_CACHE_TTL_MINUTES: '30'
          MAX_DB_CONNECTIONS: '10'
          MONITORING_ENABLED: 'true'
        EOF
        
    - name: Deploy to Test Environment
      run: |
        gcloud app deploy app-test-deploy.yaml --quiet
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        TEST_URL="https://test-env-dot-${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com/health"
        curl -f "$TEST_URL" || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Retrieve secrets from Secret Manager
      run: |
        echo "SECRET_KEY=$(gcloud secrets versions access latest --secret=flask-secret-key)" >> $GITHUB_ENV
        echo "REFRESH_SECRET_KEY=$(gcloud secrets versions access latest --secret=refresh-secret-key)" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH_CLIENT_ID=$(gcloud secrets versions access latest --secret=google-oauth-client-id)" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH_CLIENT_SECRET=$(gcloud secrets versions access latest --secret=google-oauth-client-secret)" >> $GITHUB_ENV
        echo "TASK_AUTH_TOKEN=$(gcloud secrets versions access latest --secret=task-auth-token)" >> $GITHUB_ENV
        
    - name: Create production deployment configuration
      run: |
        cat > app-prod-deploy.yaml << EOF
        runtime: python311
        entrypoint: gunicorn -b :\$PORT run:app
        
        automatic_scaling:
          target_cpu_utilization: 0.6
          target_throughput_utilization: 0.6
          max_concurrent_requests: 50
          max_instances: 10
          min_instances: 1
        
        resources:
          cpu: 1
          memory_gb: 2
          disk_size_gb: 10
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        
        env_variables:
          FLASK_ENV: 'production'
          GCP_PROJECT_ID: 'pvpocket-dd286'
          FIREBASE_SECRET_NAME: 'firebase-admin-sdk-json'
          SECRET_KEY: '${{ env.SECRET_KEY }}'
          REFRESH_SECRET_KEY: '${{ env.REFRESH_SECRET_KEY }}'
          GOOGLE_OAUTH_CLIENT_ID: '${{ env.GOOGLE_OAUTH_CLIENT_ID }}'
          GOOGLE_OAUTH_CLIENT_SECRET: '${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}'
          TASK_AUTH_TOKEN: '${{ env.TASK_AUTH_TOKEN }}'
          USE_FIRESTORE_CACHE: 'false'
          CACHE_TTL_HOURS: '24'
          USER_CACHE_TTL_MINUTES: '30'
          MAX_DB_CONNECTIONS: '15'
          MONITORING_ENABLED: 'true'
        EOF
        
    - name: Deploy to Production
      run: |
        gcloud app deploy app-prod-deploy.yaml --quiet
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        PROD_URL="https://${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com/health"
        curl -f "$PROD_URL" || exit 1
        
    - name: Run production health and basic load test
      env:
        TEST_BASE_URL: "https://${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com"
      run: |
        # Basic production health and load testing
        echo "Testing production deployment health..."
        
        # Test multiple endpoints for basic load testing  
        for i in {1..5}; do
          echo "Load test iteration $i"
          curl -f "$TEST_BASE_URL/health" -w "Response time: %{time_total}s\n" || echo "Health check failed"
          curl -f "$TEST_BASE_URL/" -w "Homepage time: %{time_total}s\n" || echo "Homepage failed"
          sleep 1
        done
        
        echo "Basic load testing completed"

  cleanup:
    name: Cleanup Temporary Files
    runs-on: ubuntu-latest
    needs: [deploy-test, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup deployment files
      run: |
        rm -f app-*-deploy.yaml || true