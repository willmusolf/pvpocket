name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:  # Manual triggers
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'fast'
        type: choice
        options:
          - fast
          - full
          - unit
          - security
          - performance

env:
  GCP_PROJECT_ID: pvpocket-dd286
  GAE_SERVICE: default

jobs:
  test:
    name: Run Tests and Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Python dependencies (full tests only)
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install additional dependencies for full tests
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        pip install safety bandit
        
    - name: Install Node.js dependencies
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: npm install
      
    - name: Security scan - Python dependencies
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        safety check --output json > safety-report.json || true
        
    - name: Security scan - Code analysis
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Lint Python code
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
    - name: Run security and lint checks
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
      run: |
        # Run security checks and linting
        echo "Security and linting completed in previous steps"
        
    - name: Set up Firebase Emulator
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # Install Firebase CLI
        npm install -g firebase-tools
        
        # Create Firebase emulator configuration
        cat > firebase.json << EOF
        {
          "firestore": {
            "rules": "firestore.rules",
            "indexes": "firestore.indexes.json"
          },
          "storage": {
            "rules": "storage.rules"
          },
          "emulators": {
            "firestore": {
              "port": 8080
            },
            "storage": {
              "port": 9199
            },
            "ui": {
              "enabled": false
            }
          }
        }
        EOF
        
        # Create basic Firestore rules for testing
        cat > firestore.rules << EOF
        rules_version = '2';
        service cloud.firestore {
          match /databases/{database}/documents {
            match /{document=**} {
              allow read, write: if true;
            }
          }
        }
        EOF
        
        # Create basic Storage rules for testing
        cat > storage.rules << EOF
        rules_version = '2';
        service firebase.storage {
          match /b/{bucket}/o {
            match /{allPaths=**} {
              allow read, write: if true;
            }
          }
        }
        EOF
        
        # Create empty indexes file
        echo '{"indexes": [], "fieldOverrides": []}' > firestore.indexes.json
    
    - name: Determine test strategy
      id: test_strategy
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "üéÆ Manual trigger - Running ${{ github.event.inputs.test_type }} tests"
          echo "test_type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          echo "description=Manually triggered ${{ github.event.inputs.test_type }} tests" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "üîç Push to MAIN branch - Running FULL tests (production deployment)"
          echo "test_type=full" >> $GITHUB_OUTPUT  
          echo "description=Comprehensive test suite with Firebase emulator for production deployment" >> $GITHUB_OUTPUT
        else
          echo "‚ö° Fast tests for development/PR - No Firebase emulator needed"
          echo "test_type=fast" >> $GITHUB_OUTPUT
          echo "description=Fast tests with mocked data for quick feedback" >> $GITHUB_OUTPUT
        fi
        
    - name: Display workflow summary
      run: |
        echo "üöÄ WORKFLOW SUMMARY"
        echo "=================="
        echo "Branch: ${{ github.ref }}"
        echo "Test Type: ${{ steps.test_strategy.outputs.test_type }}"
        echo "Description: ${{ steps.test_strategy.outputs.description }}"
        echo ""
        if [[ "${{ steps.test_strategy.outputs.test_type }}" == "fast" ]]; then
          echo "‚ö° ULTRA-FAST MODE: Skipping heavy operations (Flask app, Node.js, security scans, Firebase emulator)"
          echo "  - Only essential Python dependencies"
          echo "  - Ultra-fast tests with no Flask app initialization"
          echo "  - Target: <5 second total execution"
        else
          echo "üîç FULL MODE: Running comprehensive validation"
          echo "  - All dependencies and security scans"
          echo "  - Firebase emulator with real data"
          echo "  - Complete test suite"
        fi
        
    - name: Install basic test dependencies
      run: |
        pip install pytest pytest-mock
        
    - name: Install additional test dependencies for full tests
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        pip install pytest-cov
        
    - name: Run fast tests
      if: steps.test_strategy.outputs.test_type == 'fast'
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
        GCP_PROJECT_ID: test-project
        FIREBASE_SECRET_NAME: test-secret
      run: |
        echo "üöÄ ${{ steps.test_strategy.outputs.description }}"
        echo "‚ö° Running fast development tests with mocked data (NO Firebase emulator)"
        
        # Run the consolidated fast test file - no emulator needed
        python -m pytest tests/test_fast_development.py -v --tb=short --cov-fail-under=0
        
        echo "‚úÖ Fast tests completed successfully in $(date)!"
        
    - name: Run specific test category
      if: contains(fromJSON('["unit", "security", "performance"]'), steps.test_strategy.outputs.test_type)
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
        FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
        FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199
        RUN_INTEGRATION_TESTS: 1
      run: |
        echo "üéØ ${{ steps.test_strategy.outputs.description }}"
        echo "üî• Starting Firebase emulators for ${{ steps.test_strategy.outputs.test_type }} tests..."
        
        # Start Firebase emulators in background with explicit project ID
        echo "üî• Starting Firebase emulators with project: demo-test-project"
        firebase emulators:start --only firestore,storage --project demo-test-project &
        EMULATOR_PID=$!
        
        # Wait for emulators to start
        echo "‚è≥ Waiting for Firebase emulators to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "‚úÖ Firestore emulator is ready!"
            break
          fi
          echo "Waiting for emulators... ($i/30)"
          sleep 2
        done
        
        # Note: Firebase emulator is running but we're not seeding data
        # Integration tests now check endpoint availability rather than data
        echo "‚úÖ Firebase emulator ready for basic integration tests"
        
        # Run specific test category with emulator (no coverage requirement for targeted tests)
        python -m pytest tests/ -m "${{ steps.test_strategy.outputs.test_type }}" -v --tb=short --cov-fail-under=0
        
        # Stop emulators
        kill $EMULATOR_PID || true
        
        echo "‚úÖ ${{ steps.test_strategy.outputs.test_type }} tests completed successfully!"
        
    - name: Run full test suite (Push)
      if: steps.test_strategy.outputs.test_type == 'full'
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key-for-ci
        REFRESH_SECRET_KEY: test-refresh-key-for-ci
        FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
        FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199
        RUN_INTEGRATION_TESTS: 1
      run: |
        echo "üîç ${{ steps.test_strategy.outputs.description }}"
        echo "üî• Starting Firebase emulators and running comprehensive tests..."
        
        # Start Firebase emulators in background with explicit project ID
        echo "üî• Starting Firebase emulators with project: demo-test-project"
        firebase emulators:start --only firestore,storage --project demo-test-project &
        EMULATOR_PID=$!
        
        # Wait for emulators to start and be ready
        echo "‚è≥ Waiting for Firebase emulators to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "‚úÖ Firestore emulator is ready!"
            break
          fi
          echo "Waiting for emulators... ($i/30)"
          sleep 2
        done
        
        # Install Firebase Admin SDK for seeding
        pip install firebase-admin || echo "Firebase Admin SDK already installed"
        
        # Seed test data for integration tests (cost-optimized)
        if [ -f "scripts/create_test_data.py" ]; then
          echo "üå± Seeding Firebase emulator with minimal test data..."
          # COST OPTIMIZATION: Set environment variable to limit test data size
          export USE_MINIMAL_TEST_DATA=true
          python scripts/create_test_data.py
          if [ $? -eq 0 ]; then
            echo "‚úÖ Minimal test data seeded successfully!"
          else
            echo "‚ö†Ô∏è Test data seeding failed, but continuing with tests..."
          fi
        else
          echo "‚ö†Ô∏è Test data script not found, running tests without seed data..."
        fi
        
        # COST PROTECTION: Set environment variables to prevent expensive operations during testing
        export USE_MINIMAL_DATA=true
        export LAZY_LOAD_CARDS=true
        export FLASK_CONFIG=testing
        
        # Run comprehensive test suite (30% coverage requirement)
        echo "üß™ Running tests with cost optimizations enabled..."
        python -m pytest tests/ -v --tb=short --cov=app --cov-report=json --cov-fail-under=30
        
        # Stop emulators
        kill $EMULATOR_PID || true
        
        echo "‚úÖ Full test suite completed successfully!"
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          safety-report.json
          bandit-report.json
          performance_test_report.json
          *.log

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/development'
    # Add concurrency to limit deployments and reduce networking costs
    concurrency:
      group: deploy-test
      cancel-in-progress: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Skip network diagnostics to reduce costs
      run: |
        echo "Network diagnostics disabled to reduce networking costs"
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      id: auth
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        create_credentials_file: true
        export_environment_variables: true
        cleanup_credentials: false
      timeout-minutes: 5
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
      timeout-minutes: 3
      
    - name: Verify Authentication
      run: |
        echo "üîç Verifying Google Cloud authentication..."
        gcloud auth list
        gcloud config get-value project || echo "‚ùå Project not set"
        echo "‚úÖ Authentication verification complete"
      
    - name: Create deployment configuration
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        REFRESH_SECRET_KEY: ${{ secrets.REFRESH_SECRET_KEY }}
        GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        TASK_AUTH_TOKEN: ${{ secrets.TASK_AUTH_TOKEN }}
        ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
      run: |
        cat > app-test-deploy.yaml << EOF
        runtime: python311
        service: test-env
        entrypoint: gunicorn -b :\$PORT run:app
        
        automatic_scaling:
          target_cpu_utilization: 0.6
          max_instances: 3
          min_instances: 0
        
        resources:
          cpu: 1
          memory_gb: 1
          disk_size_gb: 10
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        
        env_variables:
          FLASK_ENV: 'staging'
          GCP_PROJECT_ID: 'pvpocket-dd286'
          FIREBASE_SECRET_NAME: 'firebase-admin-sdk-json'
          SECRET_KEY: '${{ env.SECRET_KEY }}'
          REFRESH_SECRET_KEY: '${{ env.REFRESH_SECRET_KEY }}'
          GOOGLE_OAUTH_CLIENT_ID: '${{ env.GOOGLE_OAUTH_CLIENT_ID }}'
          GOOGLE_OAUTH_CLIENT_SECRET: '${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}'
          TASK_AUTH_TOKEN: '${{ env.TASK_AUTH_TOKEN }}'
          ADMIN_EMAILS: '${{ env.ADMIN_EMAILS }}'
          USE_FIRESTORE_CACHE: 'false'
          CACHE_TTL_HOURS: '24'
          USER_CACHE_TTL_MINUTES: '30'
          MAX_DB_CONNECTIONS: '3'
          MONITORING_ENABLED: 'true'
        EOF
        
    - name: Deploy to Test Environment
      run: |
        echo "Deploying to test environment..."
        
        # Add retry logic for deployment
        for attempt in 1 2 3; do
          echo "üöÄ Deployment attempt $attempt/3..."
          
          if gcloud app deploy app-test-deploy.yaml --quiet; then
            echo "‚úÖ Test deployment completed successfully on attempt $attempt"
            break
          else
            echo "‚ùå Deployment attempt $attempt failed"
            if [ $attempt -eq 3 ]; then
              echo "üí• All deployment attempts failed"
              echo "üìã Getting recent logs for debugging..."
              gcloud logging read "resource.type=gae_app AND severity>=ERROR" --limit=10 --format="table(timestamp,severity,textPayload)" || echo "Could not fetch error logs"
              exit 1
            else
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          fi
        done
        
        # Verify deployment status
        echo "Checking deployment status..."
        echo "All services:"
        gcloud app services list
        echo "Test service versions:"
        gcloud app versions list --service=test-env --limit=3 || echo "test-env service not found"
        echo "All versions (any service):"
        gcloud app versions list --limit=5
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        TEST_URL="https://test-env-dot-${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com/health"
        echo "üîç DEBUGGING HEALTH CHECK"
        echo "========================"
        echo "Testing health endpoint: $TEST_URL"
        echo "GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}"
        echo "Current time: $(date)"
        
        # Skip detailed network diagnostics to reduce costs
        echo "Proceeding directly to health check to reduce networking costs"
        
        # Single connectivity test to reduce networking costs
        echo "Single connectivity test..."
        if curl -s --connect-timeout 5 --max-time 10 "$TEST_URL" > /dev/null 2>&1; then
          echo "‚úÖ Test environment health check passed!"
          exit 0
        else
          echo "‚ùå Test environment health check failed (single attempt only)"
          
          echo "‚ùå Health check failed - service may not be ready yet"
          
          # Get recent logs to debug the issue
          echo "üìã Fetching recent App Engine logs..."
          gcloud app logs tail --service=test-env --limit=50 || echo "Could not fetch test-env logs"
          echo "üìã Fetching default service logs..."
          gcloud app logs tail --service=default --limit=50 || echo "Could not fetch default logs"
          echo "üìã Fetching any recent logs..."
          gcloud logging read "resource.type=gae_app" --limit=20 --format="table(timestamp,severity,textPayload)" || echo "Could not fetch general logs"
          
          echo "This is not critical for test deployments, continuing..."
          exit 0
        fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    # Add concurrency to limit deployments and reduce networking costs
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Skip network diagnostics to reduce costs
      run: |
        echo "Network diagnostics disabled to reduce networking costs"
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      id: auth
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        create_credentials_file: true
        export_environment_variables: true
        cleanup_credentials: false
      timeout-minutes: 5
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
      timeout-minutes: 3
      
    - name: Verify Authentication
      run: |
        echo "üîç Verifying Google Cloud authentication..."
        gcloud auth list
        gcloud config get-value project || echo "‚ùå Project not set"
        echo "‚úÖ Authentication verification complete"
      
    - name: Retrieve secrets from Secret Manager
      run: |
        echo "SECRET_KEY=$(gcloud secrets versions access latest --secret=flask-secret-key)" >> $GITHUB_ENV
        echo "REFRESH_SECRET_KEY=$(gcloud secrets versions access latest --secret=refresh-secret-key)" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH_CLIENT_ID=$(gcloud secrets versions access latest --secret=google-oauth-client-id)" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH_CLIENT_SECRET=$(gcloud secrets versions access latest --secret=google-oauth-client-secret)" >> $GITHUB_ENV
        echo "TASK_AUTH_TOKEN=$(gcloud secrets versions access latest --secret=task-auth-token)" >> $GITHUB_ENV
        echo "ALERT_EMAIL_USER=$(gcloud secrets versions access latest --secret=alert-email-user)" >> $GITHUB_ENV
        echo "ALERT_EMAIL_PASS=$(gcloud secrets versions access latest --secret=alert-email-pass)" >> $GITHUB_ENV
        echo "ALERT_EMAIL_TO=$(gcloud secrets versions access latest --secret=alert-email-to)" >> $GITHUB_ENV
        echo "ALERT_SMS_TO=$(gcloud secrets versions access latest --secret=alert-sms-to)" >> $GITHUB_ENV
        echo "ADMIN_EMAILS=$(gcloud secrets versions access latest --secret=admin-emails)" >> $GITHUB_ENV
        
    - name: Create production deployment configuration
      run: |
        cat > app-prod-deploy.yaml << EOF
        runtime: python311
        entrypoint: gunicorn -b :\$PORT run:app
        
        automatic_scaling:
          target_cpu_utilization: 0.8
          target_throughput_utilization: 0.8
          max_concurrent_requests: 10
          max_instances: 2
          min_instances: 0
          min_idle_instances: 0
          max_idle_instances: 0
          cool_down_period_sec: 180
        
        resources:
          cpu: 1
          memory_gb: 2
          disk_size_gb: 10
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        
        env_variables:
          FLASK_ENV: 'production'
          GCP_PROJECT_ID: 'pvpocket-dd286'
          FIREBASE_SECRET_NAME: 'firebase-admin-sdk-json'
          SECRET_KEY: '${{ env.SECRET_KEY }}'
          REFRESH_SECRET_KEY: '${{ env.REFRESH_SECRET_KEY }}'
          GOOGLE_OAUTH_CLIENT_ID: '${{ env.GOOGLE_OAUTH_CLIENT_ID }}'
          GOOGLE_OAUTH_CLIENT_SECRET: '${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}'
          TASK_AUTH_TOKEN: '${{ env.TASK_AUTH_TOKEN }}'
          ALERT_EMAIL_USER: '${{ env.ALERT_EMAIL_USER }}'
          ALERT_EMAIL_PASS: '${{ env.ALERT_EMAIL_PASS }}'
          ALERT_EMAIL_TO: '${{ env.ALERT_EMAIL_TO }}'
          ALERT_SMS_TO: '${{ env.ALERT_SMS_TO }}'
          ADMIN_EMAILS: '${{ env.ADMIN_EMAILS }}'
          USE_FIRESTORE_CACHE: 'false'
          CACHE_TTL_HOURS: '24'
          USER_CACHE_TTL_MINUTES: '30'
          MAX_DB_CONNECTIONS: '5'
          MONITORING_ENABLED: 'true'
        EOF
        
    - name: Deploy to Production
      run: |
        gcloud app deploy app-prod-deploy.yaml --quiet
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        PROD_URL="https://${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com/health"
        echo "Testing production health endpoint: $PROD_URL"
        echo "GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}"
        
        # Skip DNS diagnostics to reduce costs
        echo "Proceeding directly to health check to reduce networking costs"
        
        # Single production health check to reduce networking costs
        echo "Production health check (single attempt)..."
        if curl -f --connect-timeout 8 --max-time 15 "$PROD_URL"; then
          echo "‚úÖ Production health check passed!"
          exit 0
        else
          echo "‚ùå Production health check failed"
          echo "Note: Single attempt only to reduce networking costs"
        fi
        
        echo "‚ùå CRITICAL: Production health check failed after 3 attempts"
        echo "Production deployment may have issues!"
        exit 1
        
    - name: Skip load testing to reduce networking costs
      run: |
        echo "Load testing disabled to reduce networking costs"
        echo "Production deployment health verified by previous step"

  cleanup:
    name: Cleanup Temporary Files
    runs-on: ubuntu-latest
    needs: [deploy-test, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup deployment files
      run: |
        rm -f app-*-deploy.yaml || true