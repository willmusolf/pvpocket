name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  GCP_PROJECT_ID: pvpocket-dd286
  GAE_SERVICE: default

jobs:
  test:
    name: Run Tests and Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Install Node.js dependencies
      run: npm install
      
    - name: Security scan - Python dependencies
      run: |
        safety check --output json > safety-report.json || true
        
    - name: Security scan - Code analysis
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Lint Python code
      run: |
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
    - name: Run quick performance tests
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key
        REFRESH_SECRET_KEY: test-refresh-key
        GCP_PROJECT_ID: test-project
        FIREBASE_SECRET_NAME: test-secret
      run: |
        python test_quick.py || true
        
    - name: Run CI performance test suite
      env:
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key
        REFRESH_SECRET_KEY: test-refresh-key
        GCP_PROJECT_ID: test-project
        FIREBASE_SECRET_NAME: test-secret
        TEST_BASE_URL: http://localhost:5001
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/test-credentials.json
      run: |
        # Create minimal test credentials for CI (NOT REAL - for testing only)
        echo '{
          "type": "service_account",
          "project_id": "fake-test-project",
          "private_key_id": "fake-test-key-id",
          "private_key": "-----BEGIN PRIVATE KEY-----\nFAKE-TEST-KEY-FOR-CI-ONLY-NOT-REAL\n-----END PRIVATE KEY-----\n",
          "client_email": "fake-test@fake-test-project.iam.gserviceaccount.com",
          "client_id": "000000000",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/fake-test%40fake-test-project.iam.gserviceaccount.com"
        }' > test-credentials.json
        
        # Skip performance tests in CI for now since they require real Firebase
        echo "Performance tests skipped in CI - requires real Firebase connection"
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          safety-report.json
          bandit-report.json
          performance_test_report.json
          *.log

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/development'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Create deployment configuration
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        REFRESH_SECRET_KEY: ${{ secrets.REFRESH_SECRET_KEY }}
        GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        TASK_AUTH_TOKEN: ${{ secrets.TASK_AUTH_TOKEN }}
      run: |
        cat > app-test-deploy.yaml << EOF
        runtime: python311
        service: test-env
        entrypoint: gunicorn -b :\$PORT run:app
        
        automatic_scaling:
          target_cpu_utilization: 0.6
          max_instances: 3
          min_instances: 0
        
        resources:
          cpu: 1
          memory_gb: 1
          disk_size_gb: 10
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        
        env_variables:
          FLASK_ENV: 'staging'
          GCP_PROJECT_ID: 'pvpocket-dd286'
          FIREBASE_SECRET_NAME: 'firebase-admin-sdk-json'
          SECRET_KEY: '${{ env.SECRET_KEY }}'
          REFRESH_SECRET_KEY: '${{ env.REFRESH_SECRET_KEY }}'
          GOOGLE_OAUTH_CLIENT_ID: '${{ env.GOOGLE_OAUTH_CLIENT_ID }}'
          GOOGLE_OAUTH_CLIENT_SECRET: '${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}'
          TASK_AUTH_TOKEN: '${{ env.TASK_AUTH_TOKEN }}'
          USE_FIRESTORE_CACHE: 'false'
          CACHE_TTL_HOURS: '24'
          USER_CACHE_TTL_MINUTES: '30'
          MAX_DB_CONNECTIONS: '10'
          MONITORING_ENABLED: 'true'
        EOF
        
    - name: Deploy to Test Environment
      run: |
        gcloud app deploy app-test-deploy.yaml --quiet
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        TEST_URL="https://test-env-dot-${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com/health"
        curl -f "$TEST_URL" || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Retrieve secrets from Secret Manager
      run: |
        echo "SECRET_KEY=$(gcloud secrets versions access latest --secret=flask-secret-key)" >> $GITHUB_ENV
        echo "REFRESH_SECRET_KEY=$(gcloud secrets versions access latest --secret=refresh-secret-key)" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH_CLIENT_ID=$(gcloud secrets versions access latest --secret=google-oauth-client-id)" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH_CLIENT_SECRET=$(gcloud secrets versions access latest --secret=google-oauth-client-secret)" >> $GITHUB_ENV
        echo "TASK_AUTH_TOKEN=$(gcloud secrets versions access latest --secret=task-auth-token)" >> $GITHUB_ENV
        
    - name: Create production deployment configuration
      run: |
        cat > app-prod-deploy.yaml << EOF
        runtime: python311
        entrypoint: gunicorn -b :\$PORT run:app
        
        automatic_scaling:
          target_cpu_utilization: 0.6
          target_throughput_utilization: 0.6
          max_concurrent_requests: 50
          max_instances: 10
          min_instances: 1
        
        resources:
          cpu: 1
          memory_gb: 2
          disk_size_gb: 10
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        
        env_variables:
          FLASK_ENV: 'production'
          GCP_PROJECT_ID: 'pvpocket-dd286'
          FIREBASE_SECRET_NAME: 'firebase-admin-sdk-json'
          SECRET_KEY: '${{ env.SECRET_KEY }}'
          REFRESH_SECRET_KEY: '${{ env.REFRESH_SECRET_KEY }}'
          GOOGLE_OAUTH_CLIENT_ID: '${{ env.GOOGLE_OAUTH_CLIENT_ID }}'
          GOOGLE_OAUTH_CLIENT_SECRET: '${{ env.GOOGLE_OAUTH_CLIENT_SECRET }}'
          TASK_AUTH_TOKEN: '${{ env.TASK_AUTH_TOKEN }}'
          USE_FIRESTORE_CACHE: 'false'
          CACHE_TTL_HOURS: '24'
          USER_CACHE_TTL_MINUTES: '30'
          MAX_DB_CONNECTIONS: '15'
          MONITORING_ENABLED: 'true'
        EOF
        
    - name: Deploy to Production
      run: |
        gcloud app deploy app-prod-deploy.yaml --quiet
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        PROD_URL="https://${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com/health"
        curl -f "$PROD_URL" || exit 1
        
    - name: Run production load test
      env:
        TEST_BASE_URL: "https://${{ env.GCP_PROJECT_ID }}.uc.r.appspot.com"
      run: |
        python scripts/ci_performance_tests.py --base-url="$TEST_BASE_URL" --workers=3 || true

  cleanup:
    name: Cleanup Temporary Files
    runs-on: ubuntu-latest
    needs: [deploy-test, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup deployment files
      run: |
        rm -f app-*-deploy.yaml || true