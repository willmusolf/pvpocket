rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    // Helper function to validate deck data
    function isValidDeck(deck) {
      return deck.keys().hasAll(['name', 'cards', 'created_at', 'owner_id']) &&
             deck.name is string &&
             deck.name.size() > 0 &&
             deck.name.size() <= 100 &&
             deck.cards is list &&
             deck.cards.size() <= 20 &&  // Max 20 cards per deck
             deck.owner_id is string;
    }
    
    // Helper function to validate user data
    function isValidUserData(user) {
      return user.keys().hasAll(['email', 'username']) &&
             user.email is string &&
             user.username is string &&
             user.username.size() > 0 &&
             user.username.size() <= 50;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUser();
      
      // Allow reading basic user info for friends functionality
      allow read: if isAuthenticated() && 
                     resource.data.keys().hasOnly(['username', 'profile_icon', 'friend_code']);
    }
    
    // Decks collection - users can manage their own decks
    match /decks/{deckId} {
      allow read: if isAuthenticated() && (
        // Owner can always read
        isOwner(resource.data.owner_id) ||
        // Others can read if deck is public
        (resource.data.is_public == true)
      );
      
      allow create: if isAuthenticated() && 
                       isValidUser() &&
                       isOwner(request.resource.data.owner_id) &&
                       isValidDeck(request.resource.data);
      
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.owner_id) &&
                       isValidDeck(request.resource.data) &&
                       // Prevent changing owner
                       request.resource.data.owner_id == resource.data.owner_id;
      
      allow delete: if isAuthenticated() && 
                       isOwner(resource.data.owner_id);
    }
    
    // Cards collection - read-only for all authenticated users
    match /cards/{cardSet} {
      allow read: if isAuthenticated();
      
      // Card subcollections
      match /set_cards/{cardId} {
        allow read: if isAuthenticated();
      }
    }
    
    // Internal configuration - admin only (server-side access)
    match /internal_config/{configId} {
      allow read, write: if false; // Only server-side access
    }
    
    // Friend requests and social features
    match /friend_requests/{requestId} {
      allow read, write: if isAuthenticated() && 
                           isValidUser() &&
                           (isOwner(resource.data.from_user) || 
                            isOwner(resource.data.to_user));
    }
    
    // User activity logs - users can read their own
    match /user_activity/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server writes
    }
    
    // Battle simulation data (future feature)
    match /battles/{battleId} {
      allow read, write: if isAuthenticated() && 
                           isValidUser() &&
                           (isOwner(resource.data.player1_id) || 
                            isOwner(resource.data.player2_id));
    }
    
    // Meta-game rankings - read-only for authenticated users
    match /meta_rankings/{rankingId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server writes
    }
    
    // Deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}